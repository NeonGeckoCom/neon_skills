{
    "skills": [
        {
            "title": "About",
            "url": "https://github.com/NeonGeckoCom/skill-about",
            "summary": "Skill used to provide information about this assistant.",
            "short_description": "Skill used to provide information about this assistant.",
            "description": "This skill provides information about Neon. You can ask about licensing and your Neon installation. This skill also provides formatted examples for installed skills.",
            "examples": [
                "Tell me my license.",
                "Tell me my skills.",
                "What can you do?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.2,>=1.2.2,!=1.9.0",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Daily",
            "categories": [
                "Daily",
                "Information"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI"
            ],
            "credits": [
                "NeonDaniel",
                "reginaneon",
                "NeonGeckoCom"
            ],
            "skillname": "skill-about",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Alerts",
            "url": "https://github.com/NeonGeckoCom/skill-alerts",
            "summary": "A skill to schedule alarms, timers, and reminders.",
            "short_description": "A skill to schedule alarms, timers, and reminders.",
            "description": "The skill provides functionality to create alarms, timers and reminders, remove them by name, time, or type, and ask for what is active. You may also silence all alerts and ask for a summary of what was missed if you were away, your device was off, or you had quiet hours enabled. Alarms and reminders may be set to recur daily or weekly. An active alert may be snoozed for a specified amount of time while it is active. Any alerts that are not acknowledged will be added to a list of missed alerts that may be read and cleared when requested. Other modules may integrate with the alerts skill by listening for `neon.alert_expired` events. This event will be emitted when a scheduled alert expires and will include any context associated with the event creation. If the event was created with `mq` context, the mq connector module will forward the expired alert for the client module to handle and the alert will be marked `active` until the client module emits a `neon.acknowledge_alert` Message with the `alert_id` and `missed` data, i.e.: ``` Message(\"neon.acknowledge_alert\", {\"alert_id\": <alert_id>, \"missed\": False}, <context>) ```",
            "examples": [
                "Set an alarm for 8 AM.",
                "When is my next alarm?",
                "Cancel my 8 AM alarm.",
                "Set a 5 minute timer.",
                "How much time is left?",
                "Remind me to go home at 6.",
                "Remind me to take out the trash every thursday at 7 PM.",
                "What are my reminders?",
                "Cancel all alarms.",
                "Cancel all timers.",
                "Cancel all reminders.",
                "Go to sleep.",
                "Start quiet hours.",
                "Stop.",
                "Snooze.",
                "Snooze for 1 minute.",
                "Wake up.",
                "What did I miss?",
                "Did I miss anything?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "combo_lock~=0.2",
                    "json_database~=0.5",
                    "neon-utils~=1.2",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.32"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [
                "https://github.com/mycroftai/skill-reminder",
                "https://github.com/mycroftai/skill-alarm",
                "https://github.com/mycroftai/mycroft-timer"
            ],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "Productivity",
            "categories": [
                "Productivity",
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "alert",
                "alarm",
                "timer",
                "reminder",
                "schedule"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel"
            ],
            "skillname": "skill-alerts",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Audio Record",
            "url": "https://github.com/NeonGeckoCom/skill-audio_record",
            "summary": "Record and playback short audio clips with Neon.",
            "short_description": "Record and playback short audio clips with Neon.",
            "description": "This Skill records audio from the microphone and allows you to play back that recording. Note that this Skill is particularly useful when trying to diagnose microphone issues because it allows you to \"hear\" what Neon is hearing - For example, if you have multiple audio inputs or are working on the new skill that requires pure microphone feed.",
            "examples": [
                "record audio",
                "record audio for 30 seconds",
                "record my daily prescriptions",
                "record my daily prescriptions for 1 minute"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28",
                    "psutil~=5.6"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Configuration",
            "categories": [
                "Configuration"
            ],
            "tags": [
                "audio",
                "record",
                "record-audio",
                "microphone",
                "configuration"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-audio_record",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "troubleshooting": "This skill is designed to help troubleshoot microphone issues. If you have any problems with skill\u2019s execution, try executing the subprocess command, which is called from the skill, after filling in the placeholders -     subprocess.Popen([\"arecord\", \"-r\", str(rate), \"-c\", str(channels), \"-d\", str(duration), file_path]) Manually and see if you have similar results. You microphone issue may be system-wide or limited to Neon and this will help determine that."
        },
        {
            "title": "AVmusic",
            "url": "https://github.com/NeonGeckoCom/skill-avmusic",
            "summary": "Play a song or video requested by the user.",
            "short_description": "Play a song or video requested by the user.",
            "description": "The skill provides the functionality to playback any audio or video requested by the user. No need to specify the location of the files or register any accounts. Just say what you would like to listen to and enjoy. AVmusic implements full integration of youtube_dl services and supports requests including but not limited to: - Music bands - Albums - Playlists - Specific songs - Radio - News clips - Tutorials - Mixes - Publicly available episodes of TV shows - Publicly available movies - Short clips AVmusic supports audio commands to stop, pause, and resume the playback of the currently playing video. If you requested a playlist, [you will see a list of available titles](#picture) on the left side of your opened video-player window. As of now, you can only have one instance (window) of MPV open at a time. If you invoke another playback request while watching something else, your current window will be closed and the new one will popup in its place. If you are typing your command in the terminal instead of audibly speaking it, don\u2019t worry about the typos or spelling - AVmusic will correct it for you.",
            "examples": [
                "play some imagine dragons music on repeat",
                "av play study music playlist",
                "play a cookie baking tutorial video"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils>=0.5.7,<2.0.0",
                    "pafy~=0.5.5",
                    "youtube-dl>=2021.5.16",
                    "youtube-searcher"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "Music",
                "Videos",
                "Common Play",
                "Retired"
            ],
            "credits": [
                "reginaneon",
                "NeonGeckoCom",
                "augustnmonteiro"
            ],
            "skillname": "skill-avmusic",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "troubleshooting": "There is a [known issue](https://github.com/ytdl-org/youtube-dl/issues/154) for youtube_dl, where the playback for certain videos and audio files will be temporarily unavailable if you request to listen to the same song and/or video multiple times in a row over a few days. The solution is to avoid requesting the same playback over and over again, try to word your request differently, or wait some time for the limitations to wear off. Additionally, youtube_dl is currently under active development. Make sure to stay up-to-date by running Neon's update script or use the [manual requirements instructions](#requirements) to do it yourself."
        },
        {
            "title": "CaffeineWiz",
            "url": "https://github.com/NeonGeckoCom/skill-caffeinewiz",
            "summary": "Provides the caffeine content of various drinks on request.",
            "short_description": "Provides the caffeine content of various drinks on request.",
            "description": "The skill provides the functionality to inform the user of the caffeine content of the requested drink (Multiple drinks in a row are possible) by collecting the required information from two data sources: 1.  [http://caffeinewiz.com/](http://caffeinewiz.com/) - the main source of information for the drink\u2019s database 2.  [https://www.caffeineinformer.com/the-caffeine-database](https://www.caffeineinformer.com/the-caffeine-database) - secondary source for any non-duplicate drinks CaffeineWiz uses [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/) to pull the tables from the websites above, then strips the html tags, and later formats the results into the comprehensive list. That object is pickled for the future use. The skill will check for updates periodically. You can modify that time period by changing `TIME_TO_CHECK` parameter on top of the file in the init.",
            "examples": [
                "Tell me the caffeine content of Pepsi.",
                "How much caffeine is in Starbucks Blonde?",
                "Tell me the caffeine content of Rocket Chocolate."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "beautifulsoup4~=4.0",
                    "neon-utils~=1.0,!=1.9.0",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "Information",
            "categories": [
                "Information",
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "caffeine",
                "coffee"
            ],
            "credits": [
                "NeonGeckoCom",
                "reginaneon",
                "NeonDaniel"
            ],
            "skillname": "skill-caffeinewiz",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "troubleshooting": "If you are having trouble finding requested drink or would like to add a new drink to the database, please feel free to [contact us](https://neongecko.com/ContactUs). Complete lists of drinks this skill knows can be found at [CaffeineWiz.com](https://caffeinewiz.com) and [caffeine informer](https://www.caffeineinformer.com/the-caffeine-database)."
        },
        {
            "title": "Camera",
            "url": "https://github.com/NeonGeckoCom/skill-camera",
            "summary": "Take pictures and videos.",
            "short_description": "Take pictures and videos.",
            "description": "The skill allows you to capture pictures and videos and saves them to your local device. Note: Images and videos can be found in ~/Pictures/Neon and ~/Videos/Neon respectively. Videos aren't currently saved on MyCroft Mark II hardware.",
            "examples": [
                "Take a picture."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [],
            "tags": [
                "NeonGecko Original",
                "NeonAI"
            ],
            "credits": [
                "NeonGeckoCom",
                "reginaneon",
                "NeonDaniel"
            ],
            "skillname": "skill-camera",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Communication",
            "url": "https://github.com/NeonGeckoCom/skill-communication",
            "summary": "Skill for the Common Message Skill framework.",
            "short_description": "Skill for the Common Message Skill framework.",
            "description": "This handles requests to send messages and place calls by communicating with all call and message handling skills and selecting the appropriate one to handle a request.",
            "examples": [],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [],
            "tags": [
                "NeonGecko Original",
                "NeonAI"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom"
            ],
            "skillname": "skill-communication",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Conversations by Example",
            "url": "https://github.com/NeonGeckoCom/skill-conversation_by_example.git",
            "summary": "Coming Soon",
            "short_description": "Coming Soon",
            "description": "Coming Soon",
            "examples": null,
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "networkx~=2.6.2"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Daily",
            "categories": [
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "Neon Premium",
                "WIP"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonAndrii"
            ],
            "skillname": "Conversations by Example",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Ready",
            "url": "https://github.com/NeonGeckoCom/skill-core_ready",
            "summary": "Skill to speak when Neon is ready",
            "short_description": "Skill to speak when Neon is ready",
            "description": "When Neon is started or restarted, this skill will speak a notification to the user. This speech can be enabled/disabled by intent.",
            "examples": [
                "Enable ready notifications.",
                "Disable load speech."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.2",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28",
                    "ovos-workshop~=0.0.12"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Daily",
            "categories": [
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom"
            ],
            "skillname": "skill-core_ready",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Custom Conversations",
            "url": "https://github.com/NeonGeckoCom/skill-custom_conversation",
            "summary": "Create your own or use text script files shared by other users.",
            "short_description": "Create your own or use text script files shared by other users.",
            "description": "Skill, which works using the custom text parsing implementation, provides the functionality to create, share, modify, and use any script files obtained from the shared library.",
            "examples": [
                "Tell me available script files",
                "What scripts are available",
                "Update my conversations",
                "Update my skill files",
                "Set my startup script to"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "bs4",
                    "gitpython~=3.1",
                    "neon-utils~=1.1",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "Unknown",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Configuration",
            "categories": [
                "Configuration"
            ],
            "tags": [
                "NeonAI",
                "NeonGecko Original",
                "CustomConversations",
                "Custom"
            ],
            "credits": [
                "reginaneon",
                "NeonDaniel",
                "neongeckocom"
            ],
            "skillname": "skill-custom_conversation",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "how to use": "Scripts update automatically when Neon is started; you can start a script by saying: - Run my (script name) skill file If the script has any synonyms specified, you may also use a synonym to start the script. If the script has any defined [tags](#tag), you can start the script at the tag by saying: - Run my (script name) skill file at (tag name) You may also update scripts: - Update my scripts You can request an emailed copy of a script: - Email me my (script name) script",
            "what are scripts?": "Scripts are user-constructed text files that contain various Neon commands. Using a few simple keywords, described below in the detail, you can specify exactly what Neon should say, do, repeat, and answer; you can create new dialogs, routines, loops, and query lookups, while utilizing every skill, YAML variable, and other information that Neon knows. For example:     Script: \"Demo Hello World Input\"     Variable: input     Neon speak: \"Hello World. Say anything or exit\"     voice_input(input)     Neon speak: \"you said {input}\"     Exit Scripts are easily sharable between other users via the Neongecko Scripts Library. You can submit your script there to share with all the other Neon users. You can also find various demo scripts there if you need somewhere to start or something to reference.",
            "script syntax": "Command syntax in general includes a Command and some command arguments, in the form:     Command: argument1, argument2 Multiple lines may be assigned to the same command if they are indented 4 spaces from the command declaration. An example of this with multiple spoken lines is:     Neon Speak: \"This is the first line I will speak.\"         \"I will also speak this line!\" Parentheses are used for some commands to accept parameters, for example voice_input:     voice_input(var_to_fill) Braces are used to return variable values within a literal string, for example in a speak statement:     Neon Speak: \"You said: {var_to_fill}\"",
            "starting a script file": "Scripts must begin with a `Script: ` line containing the script name and then any optional [Variable](#variable), [Claps](#claps), [Language](#language), and [Synonym](#synonym) lines. NOTE: a script name should match the name of the script file. The dot (\".\") is not a valid character to include in the script name and should be avoided. After this, you can continue with any of the other script commands. It is recommended to include a [Neon Speak](#neon-speak) statement to tell the user what they can do/how to proceed prior to requesting any [user input](#voice_input).     Script: \"Demo Weather Time Population\"     Description: \"A Simple example script that can offer the weather, time, and population of different locations.\"     Author: Neongecko     Language: en-au, female     Variable: response     Synonym: \"WTP\" #### Language This sets the language Neon will use for script responses while the script is active. This will not affect a user's profile or responses they get from Neon outside of the script. The valid language codes are: zh-zh, da-dk, nl-nl, en-au, en-gb, en-in, en-us, en-gb-wls, fr-fr, fr-ca, de-de, hi-in, is-is, it-it, ja-jp, ko-kr, nb-no, pl-pl, pt-br, pt-pt, ro-ro, ru-ru, es-es, es-mx, es-us, sv-se, tr-tr, cy-gb, cmn Any of the above language codes may also be used without the region code (i.e. \"en\" is equivalent to \"en-us\"). \"male\" or \"female\" may also be specified either before or after the language code; the default gender is \"female\".     Language: en-us, female #### Description This is an optional short description of the script. #### Author This is an optional author credit. #### Timeout This is an optional parameter to handle situations where a user hasn't responded for a specified period of time. The first argument is the duration in seconds to wait for a response (max 3600). The second parameter is interpreted as a [goto](#goto) and can be a line number or tag. Go to the named tag \"example\" after 10 seconds of inactivity: ``` Timeout: 10, example ... @example",
            "code here will be executed after 10 seconds of inactivity": "``` Go to line 7 after 30 seconds of inactivity: ``` Timeout: 30, 7 ... Neon speak: Are you still there?  # If this is line 7 of the script file, this is spoken after 30s of inactivity ``` #### Variable A variety of parameters to be used later in the script. Can be preset or empty. All variables will be saved as a list with the most recent value at index 0 and previous values appended. [table_scrape](#table_scrape) will build a dictionary of named links as options and save that at the front of the list. Variables may occupy more than one line; subsequent lines should be indented from the `Variable:` line. Variables used for [simple word substitutions](#sub_values) will contain pairs of strings where each pair is separated by a comma. Variables used for [conversational responses](#sub_key) will contain multiple quoted string sets with each set separated by a comma. Simple Variable declarations: ```     Variable: from_units     Variable: conversions = weight, volume, length, time, currency     Variable: options = table_scrape(https://www.neongecko.com/demos) ``` Word Substitutions: ``` Variable: input_sub = dont don't,     cant can't,     wont won't,     recollect remember ``` Conversational Responses: ``` Variable: key_sub = \"[sorry] for *\" \"Please don't apologize about *\" \"No need to apologize about *\",     \"i remember when {1} said {2}\" \"Do I think of {1} or {2} often?\",     \"*\" \"I don't understand. Please elaborate.\" \" What do you mean by *?\" ``` #### Synonym Specifies a phrase that can be used to start this skill file. After the script is run the first time, the synonym will be added to the user's synonyms. After this, the synonym can be used to run the script. For example:     Case: \"Run My TPW Skill File\"     Synonym: \"T P W 2\" #### Claps The number of claps that should be associated with a command while the script is active.     Claps: 2, \"what time is it\"",
            "script keywords and spacing": "Neon scripts follow the Python convention of 4 spaces to indent subordinate lines. A line without a command will be considered a subordinate of the previous line that has one fewer indent; for example, all of the lines below after `Neon speak:` would be spoken:     Neon speak:         \"Say 1 or World Times for world times\"         \"Say 2 or World Weather for world weather\"         \"Say 3 or World Populations for world populations\" There are multiple keywords available and new ones are added frequently. The current list, starting with the core example above: #### Neon speak Have Neon say something. A single line to speak can be on the same line as `Neon speak:`. If multiple lines are to be spoken, they should follow `Neon speak:` and be indented. SSML is supported in `Neon speak` and `Name speak` commands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found [here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html). ``` Neon speak: \"Hello World. Say anything or exit\" ``` ``` Neon speak:     \"Say 1 or World Times for world times\"     \"Say 2 or World Weather for world weather\"     \"Say 3 or World Populations for world populations\" ``` #### Name speak Have Neon say something with the specified name. Name is required, gender and language may optionally be specified as comma-separated parameters. If one of gender or language are specified, the other will use the user's profile setting or script setting if available. SSML is supported in `Neon speak` and `Name speak` commands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found [here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html). SSML is supported in `Neon speak` and `Name speak` commands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found [here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html). ``` Name Speak: Nobody, \"Or I can speak as someone else.\" ``` ``` Name Speak: Slow Male, male, \"<prosody volume=\"-2dB\" rate=\"x-slow\" pitch=\"x-low\">I can be quiet, slow, and deep</prosody>\" ``` ``` Name Speak: English Male, male, en-us, \"<prosody volume=\"-2dB\" rate=\"x-slow\" pitch=\"x-low\">I can be quiet, slow, and deep</prosody>\" ``` #### Reconvey Reconvey can be used in two ways: one in which a user's prior input to the script is used, and another in which specified audio files are played back. In the first method, Neon plays back a user's original audio input (if available) and prints the transcription. The last value of the passed variable is used with the last audio_file available for that variable. No Text-To-Speech will be generated, so nothing will be played if there is no input audio to use. *Note: The variable named should not be enclosed in braces unless its value is the name of the variable to be spoken* ``` voice_input(var_to_use) ... Reconvey: var_to_use ``` In the second method, a quoted text string or variable is provided along with a specified audio file. The audio file may be a public URL, an absolute path to a local file, or the filename of a file saved in `script_audio/{script title}/` within the skill directory. ``` Reconvey: var_to_use, \"https://my_website/files/audio_to_play.mp3\" ``` ``` Reconvey: \"This literal will be printed\", \"audio_file_in_script_directory.wav\" ``` ``` Reconvey: \"Literal to print\", \"~/Music/audio-file.mp3\" ``` #### Execute String to be executed as if spoken by a user. A single line to execute can be on the same line as `Execute:`. If multiple lines are to be executed, they should follow `Execute:` and be indented. When a string is executed, Neon will wait several seconds for a response before continuing. *Any commands will be executed as if a wake word was heard, so \"Neon\" is not required in front of any commands*. ``` Execute: \"What time is it in Athens\" ``` ``` Execute:     \"translate cherry to russian\"     \"tell me my language setting     \"speak to me in english     \"speak to me in Russian and French     \"speak to me in english ``` #### Tag Lines with `@` as the first non-whitespace character will be indexed as Goto tag lines. A tag line should be one word and contain only a string label. ``` @test_tag ``` ####Goto Command to go to the specified line or [tag](#tag) in the script. The argument to this command can be either a file line number (the line specified will be executed next) or a [tag](#tag) that is defined in the script (the line following the tag will be executed next). Tags may reference a line at any position in the file. *When writing a script with Goto commands, avoid entering your script at [case](#case) option lines and consider where variables are set to avoid using a variable before setting it (i.e. with [voice_input](#voice_input).* ``` Goto: test_tag ``` ``` Goto: 5 ``` #### Comments Lines with `#` as the first non-whitespace character will not be executed. Comment lines are useful for annotating a script or removing problematic lines when troubleshooting. (ex. you remove a line and leave a comment for why the line is commented out). Block comments are also allowed where blocks start and end with `\"\"\"`. ```",
            "removed speak to troubleshoot voice_input": "    # Neon speak:     #     \"Say your first name or exit\" voice_input{first_name} ``` ``` \"\"\"     This is inside a block comment. You can put in longer comment strings here, or surround a section of code \"\"\" ``` #### voice_input Specifies when a variable needs to be filled with user input. If an optional list of options is provided, the script will wait for user input to match one of those options, otherwise the next user input will be used. Once the variable has been assigned a value, the script will continue at the following line. Variables will preserve a history of previous values in a list. *It is recommended that any voice_input follows a `Neon speak:` prompting the user to say something.* ```     Variable: input     Neon speak: \"Hello World. Say anything or exit\"     voice_input(input)     Neon speak: \"you said {input}\" ``` ```     Neon speak:         \"Say 1 or World Times for world times\"         \"Say 2 or World Weather for world weather\"         \"Say 3 or World Populations for world populations\"     voice_input(response)     Case {response}: ``` ``` Variable: selected Variable: conversions = weight, volume, length, time, currency Neon speak: \"Say convert {select_one(conversions)} to convert or exit when done\" voice_input(selected,conversions) ``` #### If/Else If statements can be used to evaluate variable values. If a comparator is not given, the variable will be evaluated as a boolean, where values of `0`, `false`, `none`, `null`, `no`, and `\"\"` are false and any other value is true. Valid numeric comparators are: `>` ,`<`, `>=`, `<=`, `==`, `!=`. Valid string/list comparators are: `CONTAINS`, `IN`, `STARTSWITH`, `ENDSWITH` and their inverses when prefixed with `!`  (i.e. `!CONTAINS`). Variables may be compared to other variables or to static values. For string/list comparators, the first argument will be treated as a string, and the second will be treated as a list of strings. `CONTAINS` returns true if the left value (string) contains any element the right value (list). `IN` returns true if an exact match of the left value (string) exists in the right value (list). `STARTSWITH` returns true if the left value (string) begins with any element in the right value (list). `ENDSWITH` returns true if the left value (string) ends with any element in the right value (list). Strings passed to numeric comparisons follow [Python3 rules](https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types). ``` Variable: {test}: \"False\" if {test}:     Neon speak: \"True\" else:     Neon speak: \"False\" ``` ``` Neon speak: \"Say 'continue' to continue\" voice_input{test} if {test} == \"continue\":     Neon speak: \"Okay, lets continue\" else:     Neon speak: \"Okay, exiting.\" ``` ``` Neon speak: \"Say {conditional} to continue\" voice_input(test) if {test} != {conditional}:     Neon speak: \"Not matched, exiting\"     Exit else:     Neon speak: \"Okay, lets continue.\" ``` ``` if {input} CONTAINS \"help\":     # This block is executed if input contains the word 'help' ``` ``` if {input} CONTAINS help, assist, what:     # This block is executed if input contains any of the words: \"help\", \"assist\", \"what\" ``` #### Case Case statements can be used to execute different commands based on some variable value. Case statements often follow a voice_input to assign a variable value, but may also use a variable that has already been defined. Case options should follow the `Case:` line and be indented from that line by one. Commands to run if the case option is satisfied should be indented from that case option. A `Case:` will execute the first matched option and then continue at the next line following the end of the case; if no option is matched, the script will go back to the voice_input line immediately before the case. Case options containing \"or\" will compare the Case variable against the string on either side of \"or\". ``` Neon speak:     \"Say A or Athens for Athens's time\"     \"Say B or Bombay for Bombay's time\"     \"Say S or Seattle for Seattle's time\" voice_input(response) Case {response}:     \"A or Athens\"         Execute: \"What time is it in Athens\"     \"B or Bombay\"         Execute: \"What time is it in Bombay\"     \"S or Seattle\"         Execute: \"What time is it in Seattle\"",
            "script continues here": "Exit ``` #### Python Any line of python 3 readable code will be executed in the order it was specified in the script file. These lines will execute and then continue to the next line of the script; you may assign the output of a valid Python operation to a script variable to use later in your script. The `time` module is available in addition to any builtin methods. Currently, the following math operations are supported: `+`, `-`, `/`, `*`, `%` (modulus), `**` (power), `ln(x)`, `log(x)` (log base 10), `sqrt(x)`, and common trigonometry functions (sin, cos, tan, sinh, cosh, tanh, asin, acos, atan). The constants `e` and `pi` are also available. ``` Python: time.sleep(5) ``` ``` Python:     hypotenuse = sqrt({side_1}**2 + {side_2}**2) ``` #### Exit Exit command to finish the script. Could be positioned anywhere in the document. *Note: your script should always exit somewhere, this is often simply on the last line and indented by 0.*     Exit #### Loop Loops are defined by a starting line and an ending line with optional conditions. A loop begins where `LOOP` is declared with a name and ends where a `LOOP END` or `LOOP UNTIL` line is reached. A loop can always be exited when the user says \"exit\", otherwise the loop will run until the `UNTIL` condition is met or indefinitely if no `UNTIL` condition is met. Provides familiar functionality as loops. Can be nested and combined with other statements. Positioned at the beginnings and end of a [Case](#case) statement. A loop is started with the keyword `LOOP` followed by a name and terminated by name with the keyword `END` as noted below. No end condition defined, this loop will continue until the user says \"exit\". ``` LOOP WW     Neon speak:         \"Say A or Athens for the weather in Athens\"         \"Say B or Bombay for the weather in Bombay\"         \"Say S or Seattle for the weather in Seattle\"         \"Say exit to exit\"     voice_input(location)     Case {location}:         \"A or Athens\"             Execute: \"What is the weather in Athens\"             Neon speak: \"about to repeat A\"         ...      Neon speak:          \"End of loop WW.\" LOOP WW END ``` A loop until a specified variable has been filled in with the defined values: ``` LOOP WW     Neon speak:         \"Say A or Athens for the weather in Athens\"         \"Say B or Bombay for the weather in Bombay\"         \"Say S or Seattle for the weather in Seattle\"         \"Say exit to exit\"     voice_input(location)     Case {location}:         \"A or Athens\"             Execute: \"What is the weather in Athens\"             Neon speak: \"about to repeat A\"         ...      Neon speak:          \"End of loop WW.\" LOOP WW UNTIL location == \"b\" ``` #### Set You may set variables equal to other variable values or static values with the keyword `Set` anywhere in a script. This can be useful to save a variable value before modifying the variable.         Set: user_speech = {input} If this command is not indented from the previous line, it may be inferred         Neon Speak: \"Setting variable\"         user_speech = {input} #### Email You may draft and send an email to the user running a script if their email is available. The title may be a quoted literal or a variable reference. The body may be a variable or a string literal.     Email: \"My Email Title\", variable_body #### Run You may execute a different script from within your script. Users will be notified when the requested script is started or if a requested script isn't available. Upon exit from the script called via `Run`, the original script will resume at the following line and continue normally. Variables from the calling script will be available to the called script if that script does not have a variable of the same name defined or the variable is defined with no value. When the original script is resumed, any defined variables are restored to the same state they were in prior to the `Run` command.     Run: demo guess number #### sub_values Accepts a variable string to modify and a list variable containing substitution pairs. Any word matched to the first word of a substitution pair will be replaced with the second word of that pair in the passed variable. ``` Variable: input_sub = dont don't,     cant can't,     wont won't,     recollect remember ... sub_values(input, input_sub) ``` #### sub_key sub_key is a simplified method for matching a user's input to a pattern and then generating a response associated with that pattern. sub_key accepts a string variable to match and a list variable containing `strings to match` and `associated responses`. Wildcards (`*`) and new variables (`{var_1}`) may be used in the `strings to match` and the `associated responses` to include parts of the input in the response. Multiple wildcards will be evaluated positionally (i.e. the first wildcard in the input will be used as the first wildcard in the output). sub_key executes such that the first matched response in the `associated responses` list will be used; this allows a catch-all wildcard to be used at the end of the list to handle any input that doesn't match a specified pattern. Bracketed strings (`[string]`) reference a list variable so that any word in the variable is accepted as a match. *Note: wildcard variables are only available for the current substitution; named variables are available for use later in the script until overwritten.* ``` Variable: sorry = sorry, i apologize Variable: key_sub = \"[sorry] for *\" \"Please don't apologize about *\" \"No need to apologize about *\",     \"i remember when {1} said {2}\" \"Do I think of {1} or {2} often?\",     \"*\" \"I don't understand. Please elaborate.\" \" What do you mean by *?\" ... sub_key(input, key_sub) ``` ### Functions (Used for variable assignment or inline text substitution): The following functions accept one or more arguments in parentheses and return values that can be assigned to a variable or, in some cases, a value that can be substituted within a quoted string. #### select_one Specifies that the value will have to be filled in by user's choice from the provided list of items before proceeding. Used in [Neon speak](#neon-speak) statements to speak the available options for a variable.     Variable: conversions = weight, volume, length, time, currency     Neon speak:     \"Say convert {select_one(conversions)} to convert or exit when done\" #### table_scrape Uses beautiful soup to give back a readable and searchable dictionary of text/link pair of any HTML table element on a provided web page.     Variable: options = table_scrape(https://www.neongecko.com/demos) #### random Returns random elements of the given list variable. If used to set a [variable](#variable), one value will be assigned; in a [Neon speak](#neon-speak), 2-3 examples will be provided and spoken. ``` Variable: numbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 Variable: neon_num = random(numbers) ``` ```     Variable: options = table_scrape(https://www.neongecko.com/demos)     Variable: chosen     Neon speak:         \"Please tell me what kind of help video you would like to see. You can say things like {random(options)}\" ``` #### closest Returns the closest element of a list to the specified variable (generally used in combination with table scrape). Optimized for string processing.     Execute: \"av play {closest(chosen,options)}\" #### profile Lookup a value from a user profile to use in a speak or execute command.     Variable: email = profile(user.email) #### skill Call a skill and extract a some specific data from it. You must pass a valid skill intent (same as you would to [Execute](#execute)), as well as a valid key from that intent's dialog data. In general, this option should only be used if you maintain the required skill and script, as these parameters may change.     Neon Speak: \"It is currently {skill(\"what is the weather\", weather)}\" *Note: \"weather\" is defined in the weather skill dialog for this intent*",
            "how to use scripts": "Scripts can be downloaded from Neongecko's library or drafted and added to the script_txt folder in the skill directory. The demo skill files (found in the library at neongecko.net) and descriptions above provide a summary and examples of the available functionality and formatting requirements."
        },
        {
            "title": "Data Controls",
            "url": "https://github.com/NeonGeckoCom/skill-data_controls",
            "summary": "Manage user data",
            "short_description": "Manage user data",
            "description": "Manage saved transcriptions and other user-generated media.",
            "examples": [
                "Clear my user transcriptions.",
                "Erase all pictures.",
                "Delete my profile."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Configuration",
            "categories": [
                "Configuration"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "Data",
                "Settings",
                "Privacy",
                "Profile"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel"
            ],
            "skillname": "skill-data_controls",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Date and Time",
            "url": "https://github.com/NeonGeckoCom/skill-date_time",
            "summary": "Get the time, date, day of the week",
            "short_description": "Get the time, date, day of the week",
            "description": "Get the local time or time for major cities around the world.  Times are given in 12-hour (2:30 pm) or 24-hour format (14:30) based on the Time Format setting at [Home](https://home.mycroft.ai/#/setting/basic) Time can optionally be shown on a display, like a digital clock.  See the [Skill Setting](https://home.mycroft.ai/#/skill).",
            "examples": [
                "What time is it?",
                "What time is it in Paris?",
                "What's the date?",
                "Tell me the day of the week."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "geocoder~=1.38",
                    "neon-utils~=1.3",
                    "ovos-bus-client~=0.0.4",
                    "ovos-utils~=0.0.34",
                    "pytz>=2022.1",
                    "timezonefinder~=5.2"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/calendar.svg",
            "category": "Daily",
            "categories": [
                "Daily"
            ],
            "tags": [
                "date",
                "time",
                "clock",
                "world-time",
                "world-clock",
                "date-time"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel"
            ],
            "skillname": "skill-date_time",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Date and Time",
            "url": "https://github.com/NeonGeckoCom/skill-date_time",
            "summary": "Get the time, date, day of the week",
            "short_description": "Get the time, date, day of the week",
            "description": "Get the local time or time for major cities around the world.  Times are given in 12-hour (2:30 pm) or 24-hour format (14:30) based on the Time Format setting at [Home](https://home.mycroft.ai/#/setting/basic) Time can optionally be shown on a display, like a digital clock.  See the [Skill Setting](https://home.mycroft.ai/#/skill).",
            "examples": [
                "What time is it?",
                "What time is it in Paris?",
                "What's the date?",
                "Tell me the day of the week."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "geocoder~=1.38",
                    "neon-utils~=1.8,>=1.8.1",
                    "ovos-bus-client~=0.0.4",
                    "ovos-lingua-franca~=0.4,>=0.4.8a3",
                    "ovos-utils~=0.0, >=0.0.34",
                    "ovos-workshop~=0.0.12",
                    "pytz>=2022.1",
                    "timezonefinder~=5.2"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/calendar.svg",
            "category": "Daily",
            "categories": [
                "Daily"
            ],
            "tags": [
                "date",
                "time",
                "clock",
                "world-time",
                "world-clock",
                "date-time"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel"
            ],
            "skillname": "skill-date_time",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Demo",
            "url": "https://github.com/NeonGeckoCom/skill-demo",
            "summary": "Skill to demo Neon capabilities",
            "short_description": "Skill to demo Neon capabilities",
            "description": "The demo skill will prompt on first run if you'd like to see a demo. User may accept or decline and optionally choose to be asked again on next run. The demo may also be run at any time via intent.",
            "examples": [
                "Show me the demo."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-tts-plugin-audiofiles~=0.0.2",
                    "neon-utils~=1.0,>=1.2.2",
                    "ovos-bus-client~=0.0.3",
                    "ovos-plugin-manager~=0.0.21",
                    "ovos-utils~=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Information",
            "categories": [
                "Information"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "Demo"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom"
            ],
            "skillname": "skill-demo",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Device Control Center",
            "url": "https://github.com/NeonGeckoCom/skill-device_controls",
            "summary": "Handles system-wide settings and controls.",
            "short_description": "Handles system-wide settings and controls.",
            "description": "Device Control skill handles global core configuration and OS interactions (via messagebus/PHAL service).",
            "examples": [
                "Skip wake words.",
                "Require wake words.",
                "I want you to exit.",
                "I want you to shut down.",
                "I want you to restart."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Configuration",
            "categories": [
                "Configuration",
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "controls",
                "device",
                "wake words",
                "power",
                "settings"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-device_controls",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "LLM Fallback",
            "url": "https://github.com/NeonGeckoCom/skill-fallback_llm",
            "summary": "Get an LLM response from the Neon Diana backend.",
            "short_description": "Get an LLM response from the Neon Diana backend.",
            "description": "Converse with an LLM and enable LLM responses when Neon doesn't have a better response. To send a single query to an LLM, you can ask Neon to \"ask Chat GPT <something>\". To start conversing with an LLM, ask to \"talk to Chat GPT\" and have all of your input sent to an LLM until you say goodbye or stop talking for a while. Enable fallback behavior by asking to \"enable LLM fallback skill\" or disable it by asking to \"disable LLM fallback\". To have a copy of LLM interactions sent via email, ask Neon to \"email me a copy of our conversation\".",
            "examples": [
                "Explain quantum computing in simple terms",
                "Ask chat GPT what an LLM is",
                "Talk to chat GPT",
                "Enable LLM fallback skill",
                "Disable LLM fallback skill",
                "Email me a copy of our conversation"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.4",
                    "neon_mq_connector~=0.7",
                    "ovos-utils~=0.0, >=0.0.28",
                    "ovos_workshop~=0.0.11"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "",
            "categories": [],
            "tags": [],
            "credits": [],
            "skillname": "skill-fallback_llm",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Fallback Unknown",
            "url": "https://github.com/NeonGeckoCom/skill-fallback_unknown",
            "summary": "Unknown request fallback handler. Executes if every other step failed to answer the question.",
            "short_description": "Unknown request fallback handler. Executes if every other step failed to answer the question.",
            "description": "This fallback is how Neon would let you know if he can't help with what you said and answer your question. This skill will execute as a last resort, and only if you are currently in the wakewords-required mode. If you are skipping wakewords, the failed utterances will be ignored. Neon will try to match the request to Adapt skills, Padatious skills, and all of Fallbacks before finally l reaching it here.",
            "examples": [],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.5",
                    "ovos-workshop~=0.0.15",
                    "ovos_utils~=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [],
            "tags": [
                "fallback",
                "unknown",
                "system"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-fallback_unknown",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "troubleshooting": "Check your signal handling in `/mycroft/ipc` if you are receiving response from this skill while skipping wake words."
        },
        {
            "title": "Wolfram Alpha",
            "url": "https://github.com/NeonGeckoCom/skill-fallback_wolfram_alpha",
            "summary": "General knowledge fallback handler based on [Wolfram Alpha](https://wolframalpha.com) services",
            "short_description": "General knowledge fallback handler based on [Wolfram Alpha](https://wolframalpha.com) services",
            "description": "Answers general knowledge, math, and definition questions by using Wolfram Alpha Api services. If the user is interested in knowing where the information for the spoken answer came from, Neon can send the most recent source of the spoken details to user\u2019s email. Responses are cached and saved for later use. Use of this skill requires use of third-party APIs. If you do not have access to Neon API servers, you may access the Wolfram|Alpha API directly by providing a key in `~/wolfram.txt`. You can generate a Wolfram|Alpha key [here](https://developer.wolframalpha.com/portal/myapps/).",
            "examples": [
                "What is 2 + 2?",
                "Who won best picture in 2006?",
                "How far away is the moon?",
                "Send me the source for that."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-api-proxy~=0.4",
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28",
                    "requests>=2.13.0"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/question.svg",
            "category": "",
            "categories": [],
            "tags": [],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-fallback_wolfram_alpha",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Free Music Archive",
            "url": "https://github.com/NeonGeckoCom/skill-free_music_archive",
            "summary": "[OCP](https://github.com/OpenVoiceOS/ovos-ocp-audio-plugin) skill to play royalty free music from [Free Music Archive](https://freemusicarchive.org/).",
            "short_description": "[OCP](https://github.com/OpenVoiceOS/ovos-ocp-audio-plugin) skill to play royalty free music from [Free Music Archive](https://freemusicarchive.org/).",
            "description": "Search and play royalty free music from [Free Music Archive](https://freemusicarchive.org/).",
            "examples": [
                "Play jazz.",
                "Play classical music.",
                "Play electronic music.",
                "Play Mozart."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "beautifulsoup4~=4.11",
                    "neon-utils~=1.0",
                    "ovos-plugin-common-play~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28",
                    "ovos-workshop~=0.0.7"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://freemusicarchive.org/legacy/fma-smaller.jpg",
            "category": "Music",
            "categories": [
                "Music"
            ],
            "tags": [
                "music",
                "Royalty Free",
                "Free Music Archive",
                "NeonAI",
                "NeonGecko Original",
                "OCP",
                "Common Play"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel"
            ],
            "skillname": "skill-free_music_archive",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Script Generator",
            "url": "https://github.com/NeonGeckoCom/skill-generate_script.git",
            "summary": "A skill that generates scripts, which can be used by custom-conversations.neon after compiling",
            "short_description": "A skill that generates scripts, which can be used by custom-conversations.neon after compiling",
            "description": "A skill that generates scripts, which can be used by custom-conversations.neon after compiling",
            "examples": null,
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Daily",
            "categories": [
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "Neon Premium",
                "WIP"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonAndrii"
            ],
            "skillname": "Script Generator",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Gesture Detection",
            "url": "https://github.com/NeonGeckoCom/skill-gesture_detection.git",
            "summary": "Recognizes claps and other gestures and execute some action.",
            "short_description": "Recognizes claps and other gestures and execute some action.",
            "description": "Provides controls to enable/disable gestures and translates detected gestures into actions.",
            "examples": [
                "(enable/disable) clap commands",
                "change clap commands to my (home/audio/default) set"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils>=0.5.7",
                    "pyaudio",
                    "numpy"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [
                ""
            ],
            "tags": [
                "NeonGecko Original",
                "Neon Premium",
                "WIP"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel"
            ],
            "skillname": "Gesture Detection",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Holidays",
            "url": "https://github.com/NeonGeckoCom/skill-holidays",
            "summary": "Skill to provide local holidays",
            "short_description": "Skill to provide local holidays",
            "description": "Queries a database of known holidays for different locales. This skill can provide dates for requested holidays and return holidays on a requested date.",
            "examples": [
                "When is Valentine's Day?",
                "Tell me when April Fool's Day is.",
                "Is June nineteenth a holiday?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "ovos-lingua-franca~=0.4, >=0.4.6",
                    "ovos-workshop~=0.0.11,>=0.0.12a4",
                    "requests~=2.0"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "Information",
            "categories": [
                "Information",
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "Neon AI",
                "Holiday",
                "Dates"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel"
            ],
            "skillname": "skill-holidays",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "I Like Brands",
            "url": "https://github.com/NeonGeckoCom/skill-i_like_brands.git",
            "summary": "Skill that lets Neon catch user\u2019s preferences from the list of available brands.",
            "short_description": "Skill that lets Neon catch user\u2019s preferences from the list of available brands.",
            "description": "This is a skill that acts as a support for Neon\u2019s coupons generation. I-like-brands is listening for user\u2019s utterances mentioning preferred brands anywhere in the speech throughout the day, given appropriate permissions. Obtained information is then saved as a part of the selected transcriptions - `ts_selected_transcripts` - accessible to the user, along with the associated user\u2019s audio file, which can be found at `ts_transcript_audio_segments`. Every match will be announced with the \u201cding\u201d sound. Then, if requested, those lines that should follow the pattern of `I like *brandname*` are exported to the internal Coupons.py class to generate coupons for discounts and good offers for the user. That request can be made through my-coupons skill. Before generating any new responses, Neon will check with our remote server to see if any new brands became available for processing. This skill is a good demonstration on Neon\u2019s handling for information acquisition and work with the remote server.",
            "examples": [
                "i like neon",
                "i don't like alpha"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils>=0.5.7"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [
                ""
            ],
            "tags": [
                "NeonGecko Original",
                "Neon Premium"
            ],
            "credits": [
                "reginaneon",
                "NeonGeckoCom"
            ],
            "skillname": "I Like Brands",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "I Like Coupons",
            "url": "https://github.com/NeonGeckoCom/skill-i_like_coupons.git",
            "summary": "Request the list of coupons, relevant to your current interests.",
            "short_description": "Request the list of coupons, relevant to your current interests.",
            "description": "Skill, which works using [track my brands](http://trackmybrands.com/) database and goes in pair with \u201ci-like-brands\u201d skill, provides the user with a list of the current coupons relevant to the user's areas of interests. Generated coupons, along with transcriptions, can be emailed via `send me my coupons` command. Coupons are generated based on the information from selected transcripts file, which gets populater from \u201ci-like-brands\u201d skill. Alternatively, user can ask for specific brand-based coupons, such as `tell me coupons for Neon` if they do not wish to use \u201ci-like-brands\u201d skill recordings or transcriptions. In addition, upon request, Neon could recite text or replay audio in user\u2019s voice saying the list of brands that the user showed interest in. The data is collected via \u201ci-like-brands\u201d skill, same as previously. For example: - List the brands I like - Here are your brands: *list of names of the brand in the user's voice*",
            "examples": [
                "tell me my likes",
                "read me my likes",
                "tell me coupons for neon",
                "tell me my coupons",
                "email me my coupons"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils>=0.5.7"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [
                ""
            ],
            "tags": [
                "NeonGecko Original",
                "Neon Premium"
            ],
            "credits": [
                "reginaneon",
                "NeonGeckoCom"
            ],
            "skillname": "I Like Coupons",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Instructions",
            "url": "https://github.com/NeonGeckoCom/skill-instructions",
            "summary": "Neon skill for instructions reading and implementation",
            "short_description": "Neon skill for instructions reading and implementation",
            "description": "Reads structured instructions and guides a user through them",
            "examples": [
                "start instructions"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon_utils~=1.0",
                    "numpy",
                    "ovos-utils~=0.0, >=0.0.28",
                    "wavfile",
                    "word2number"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Information",
            "categories": [
                "Information",
                "Daily"
            ],
            "tags": [
                "Neongecko",
                "NeonAI",
                "NeonGecko Original",
                "Instructions",
                "Custom"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonMariia"
            ],
            "skillname": "skill-instructions",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "IP Address",
            "url": "https://github.com/NeonGeckoCom/skill-ip_address",
            "summary": "Retrieve the [IP address](https://en.wikipedia.org/wiki/IP_address), also known as the \"network address\" of the Device and respond verbally to the user, and if the Device supports it, display the IP address.",
            "short_description": "Retrieve the [IP address](https://en.wikipedia.org/wiki/IP_address), also known as the \"network address\" of the Device and respond verbally to the user, and if the Device supports it, display the IP address.",
            "description": "Returns the known IP addresses to the user, if requested. Useful for testing.",
            "examples": [
                "What's your IP address?",
                "Tell me your IP address.",
                "What is my public IP address?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "ifaddr~=0.1",
                    "neon-utils~=1.7",
                    "ovos-bus-client~=0.0.5",
                    "ovos-utils~=0.0, >=0.0.28",
                    "ovos-workshop~=0.0.12",
                    "requests~=2.20"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Configuration",
            "categories": [
                "Configuration"
            ],
            "tags": [
                "IP-address",
                "IPaddress",
                "network-address",
                "network",
                "system"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "reginaneon",
                "Ryan Sipes",
                "Steve Penrod"
            ],
            "skillname": "skill-ip_address",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Klat",
            "url": "https://github.com/NeonGeckoCom/skill-klat.git",
            "summary": "Skill that acts as a connector to klat.com via the klat_api",
            "short_description": "Skill that acts as a connector to klat.com via the klat_api",
            "description": "Enables logging in to klat.com, navigating to conversations, and sending/receiving shouts.",
            "examples": [
                "(enable/disable) klat connection"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "git+https://github.com/neongeckocom/klat-connector",
                    "neon-utils>=0.5.7"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [
                ""
            ],
            "tags": [
                "NeonGecko Original",
                "Neon Premium"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom"
            ],
            "skillname": "Klat",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Launcher",
            "url": "https://github.com/NeonGeckoCom/skill-launcher",
            "summary": "Browse the web by voice",
            "short_description": "Browse the web by voice",
            "description": "This skill is used to browse the web.",
            "examples": [
                "Browse to neon.ai",
                "Navigate to google.com"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils[network]~=1.0",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "Productivity",
            "categories": [
                "Productivity",
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "browser",
                "desktop",
                "web"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-launcher",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Local Music",
            "url": "https://github.com/NeonGeckoCom/skill-local_music",
            "summary": "[OCP](https://github.com/OpenVoiceOS/ovos-ocp-audio-plugin) skill to play media from local storage.",
            "short_description": "[OCP](https://github.com/OpenVoiceOS/ovos-ocp-audio-plugin) skill to play media from local storage.",
            "description": "Search and play music saved to the local file system. By default, the contents of `/media` will be used, but this can be changed in skill settings. Tagged audio files will have image art and track info parsed from metadata, but you may also organize files in the following format to parse untagged files (i.e. `.wav` files). ``` Artist 1 | |- Album |  | |  |- 01 Song Title.wav |  |- Folder.jpg Artist 2 | |- Album 2 ... ```",
            "examples": [
                "Play local music.",
                "Play music."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "id3parse~=0.1",
                    "ovos-ocp-files-plugin~=0.13",
                    "ovos-plugin-common-play~=0.0",
                    "ovos-skill-installer~=0.0.5",
                    "ovos-workshop~=0.0.7",
                    "ovos_utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://freemusicarchive.org/legacy/fma-smaller.jpg",
            "category": "Music",
            "categories": [
                "Music",
                "Daily"
            ],
            "tags": [
                "music",
                "NeonAI",
                "NeonGecko Original",
                "OCP",
                "Common Play"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel"
            ],
            "skillname": "skill-local_music",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Messaging",
            "url": "https://github.com/NeonGeckoCom/skill-messaging",
            "summary": "Handles mobile requests for phone calls, SMS, and emails.",
            "short_description": "Handles mobile requests for phone calls, SMS, and emails.",
            "description": "This handles SMS, phone call, and email requests.",
            "examples": [
                "call Daniel",
                "call 555-555-5555",
                "Send a text message to Daniel that says hello",
                "Send an email to demo@neongecko.com with the subject Test Email"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28",
                    "phonenumbers~=8.12"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "Communication",
                "SMS",
                "Email",
                "Phone",
                "Android"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom"
            ],
            "skillname": "skill-messaging",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Latest news",
            "url": "https://github.com/NeonGeckoCom/skill-news",
            "summary": "Listen to the latest news report from your favorite broadcast",
            "short_description": "Listen to the latest news report from your favorite broadcast",
            "description": "Play the latest news from an RSS audio feed. Your device location will be used to provide a local feed from your country if available. Otherwise, the National Public Radio (NPR) Hourly News will be used. You can also choose your own default or add a custom audio feed at: [home.mycroft.ai](https://home.mycroft.ai/#/skill). Supported stations include: - Associated Press (AP) Hourly Radio News - [AU] ABC News Australia - [BE] VRT Nieuws - [CA] CBC News - [DE] DLF - [DE] WDR - [FI] YLE - [SE] Ekot - [UK] BBC News - [US] Fox News - [US] NPR News Now - [US] PBS NewsHour",
            "examples": [
                "play the news",
                "play the bbc news",
                "tell me the news",
                "what's the news?",
                "restart news"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "beautifulsoup4==4.9.0",
                    "feedparser~=6.0.0",
                    "neon-utils>=0.6,<2.0.0"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/newspaper.svg",
            "category": "Daily",
            "categories": [
                "Daily",
                "Information"
            ],
            "tags": [
                "news",
                "headlines",
                "Retired"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel"
            ],
            "skillname": "skill-news",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Personal",
            "url": "https://github.com/NeonGeckoCom/skill-personal",
            "summary": "Skill used for introduction between the user and Neon.",
            "short_description": "Skill used for introduction between the user and Neon.",
            "description": "Personal skill provides responses to questions about who Neon is.",
            "examples": [
                "Who are you?",
                "Who made you?",
                "When were you born?",
                "What is your email address?",
                "Where were you born?",
                "What are you?",
                "How are you?",
                "What is your name?",
                "Where are you?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Entertainment",
            "categories": [
                "Entertainment",
                "Daily",
                "Information"
            ],
            "tags": [],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-personal",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Playback Control",
            "url": "https://github.com/NeonGeckoCom/skill-playback_control",
            "summary": "Common playback control system",
            "short_description": "Common playback control system",
            "description": "This Skill doesn't do anything by itself, but it provides an important common language for audio playback skills.  By handling simple phrases like 'pause', this one Skill can turn around and rebroadcast the [messagebus](https://mycroft.ai/documentation/message-bus/) command `mycroft.audio.service.pause`, allowing several music services to share common terminology such as \"pause\". Additionally, this implements the common Play handler.  This allows playback services to negotiate which is best suited to play back a specific request. This capability is used by the [Spotify](https://github.com/forslund/spotify-skill) and [Pandora](https://github.com/mycroftai/pianobar-skill) Skills, among others.",
            "examples": [
                "play my summer playlist",
                "play pandora",
                "pause",
                "resume",
                "next song",
                "next track",
                "previous track",
                "previous song"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/play.svg",
            "category": "Music",
            "categories": [
                "Music",
                "Retired"
            ],
            "tags": [
                "music",
                "play",
                "playback",
                "pause",
                "resume",
                "next",
                "system"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel"
            ],
            "skillname": "Playback Control",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Query",
            "url": "https://github.com/NeonGeckoCom/skill-query",
            "summary": "Negotiates the best answer to a question",
            "short_description": "Negotiates the best answer to a question",
            "description": "Negotiates handling of questions by calling all registered Common Query Skills. This is done by sending a `question:query` message with the utterance to give the skills the posibility to report back if they can answer the question and at which confidence.",
            "examples": [
                "how tall is abraham lincoln?",
                "what is an aardwark?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "mycroft-messagebus-client~=0.9",
                    "neon-utils~=0.6"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/question.svg",
            "category": "Information",
            "categories": [
                "Information"
            ],
            "tags": [
                "system",
                "Retired"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "NeonAndrii"
            ],
            "skillname": "skill-query",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Recipes",
            "url": "https://github.com/NeonGeckoCom/skill-recipes",
            "summary": "Get help making a meal.",
            "short_description": "Get help making a meal.",
            "description": "Uses themealdb.com to find recipes",
            "examples": [
                "what can I cook with chicken?",
                "how do I cook lasagna?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Information",
            "categories": [
                "Information",
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonAndrii"
            ],
            "skillname": "skill-recipes",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Running Out",
            "url": "https://github.com/NeonGeckoCom/skill-running_out.git",
            "summary": "Notify a caregiver when a user is running out of something",
            "short_description": "Notify a caregiver when a user is running out of something",
            "description": "This example skill is used to listen for a user running out of a specific set of things.",
            "examples": [
                "i'm out of toothpaste",
                "i can't find my toothbrush",
                "i need a new toothbrush"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils>=0.5.7"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "logo.svg",
            "category": "Daily",
            "categories": [
                "Daily"
            ],
            "tags": [
                "NeonAI",
                "Healthcare",
                "Assisted Living",
                "NeonGecko Original",
                "Neon Premium"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel"
            ],
            "skillname": "Running Out",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Speak",
            "url": "https://github.com/NeonGeckoCom/skill-speak",
            "summary": "Have Neon repeat whatever you want",
            "short_description": "Have Neon repeat whatever you want",
            "description": "Turn Neon into a parrot.  Speak a phrase and listen to it repeated in Mycroft's selected voice.",
            "examples": [
                "Say Goodnight, Gracie.",
                "Repeat I can say anything you'd like!"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos_utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/bullhorn.svg",
            "category": "Entertainment",
            "categories": [
                "Entertainment"
            ],
            "tags": [
                "speak",
                "say",
                "repeat",
                "system"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel"
            ],
            "skillname": "skill-speak",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Speed Test",
            "url": "https://github.com/NeonGeckoCom/skill-speed_test",
            "summary": "Skill used to test your internet speed",
            "short_description": "Skill used to test your internet speed",
            "description": "This skill uses speedtest.net to check your internet speed",
            "examples": [
                "Run a speed test.",
                "How fast is my internet?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28",
                    "speedtest-cli~=2.1"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Daily",
            "categories": [
                "Daily",
                "Productivity"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "Internet",
                "Utilities"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom",
                "reginaneon"
            ],
            "skillname": "skill-speed_test",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Spelling",
            "url": "https://github.com/NeonGeckoCom/skill-spelling",
            "summary": "Let Neon help you spell words",
            "short_description": "Let Neon help you spell words",
            "description": "Neon can spell any word which is understood by speech-to-text.",
            "examples": [
                "How do you spell aardvark?",
                "Spell succotash.",
                "How do you spell bureacracy?",
                "Spell omnipotence."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos_utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/book-reader.svg",
            "category": "Information",
            "categories": [
                "Information"
            ],
            "tags": [
                "spell",
                "spelling"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel"
            ],
            "skillname": "skill-spelling",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Stock",
            "url": "https://github.com/NeonGeckoCom/skill-stock",
            "summary": "This skill provides stock values.",
            "short_description": "This skill provides stock values.",
            "description": "Use this skill to lookup stock prices. Use of this skill requires use of third-party APIs. If you do not have access to Neon API servers, you may access the Alpha Vantage API directly by providing a key in `~/alpha_vantage.txt`. You can generate an Alpha Vantage key [here](https://www.alphavantage.co/support/#api-key)",
            "examples": [
                "What is the share price for Amazon?",
                "What is the stock price for Microsoft?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-api-proxy~=0.4",
                    "neon-utils~=1.0",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/money-check-alt.svg",
            "category": "Information",
            "categories": [
                "Information",
                "Daily"
            ],
            "tags": [
                "NeonGecko",
                "NeonAI",
                "stock",
                "finance"
            ],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-stock",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Support Helper",
            "url": "https://github.com/NeonGeckoCom/skill-support_helper",
            "summary": "Get diagnostic information sent via email.",
            "short_description": "Get diagnostic information sent via email.",
            "description": "The skill provides the functionality to get core module status information and message information, including user profile information, sent to the user via email.",
            "examples": [
                "Create a troubleshooting package.",
                "Create a support ticket."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils[network]~=1.3",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28",
                    "ovos-workshop~=0.0.12",
                    "pyyaml>=5.4,<7.0"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/solid/life-ring.svg",
            "category": "",
            "categories": [],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "Support",
                "Help"
            ],
            "credits": [
                "NeonGeckoCom",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-support_helper",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "troubleshooting": "If you do not see your troubleshooting email, check your spam folder."
        },
        {
            "title": "Symptom Checker",
            "url": "https://github.com/NeonGeckoCom/skill-symptom_checker",
            "summary": "A skill to gather reported symptoms of users.",
            "short_description": "A skill to gather reported symptoms of users.",
            "description": "The skill provides functionality to gather reported symptoms, provide basic information about possible causes and remedies, and to inform caregivers. In case no symptoms are gathered, the skills starts a friendly conversation with the user (custom-conversations skills is required).",
            "examples": [
                "i feel sad today",
                "my left eye is itchy and has been watering for a few hours",
                "my right elbow hurts"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils>=0.5.7"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "NeonAI License v2.0",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "",
            "categories": [
                ""
            ],
            "tags": [
                "NeonGecko Original",
                "Neon Premium"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom"
            ],
            "skillname": "Symptom Checker",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Synonyms",
            "url": "https://github.com/NeonGeckoCom/skill-synonyms",
            "summary": "This skill handles setting and calling synonym (aliased) commands.",
            "short_description": "This skill handles setting and calling synonym (aliased) commands.",
            "description": "You may define a phrase as a synonym for a Neon command. Any time you ask something, this skill will check to see if it is a synonym for something else and complete that other action.",
            "examples": [],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.28"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "Daily",
            "categories": [
                "Daily",
                "Productivity"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "synonym",
                "alias",
                "commands"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom",
                "reginaneon"
            ],
            "skillname": "skill-synonyms",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Translation",
            "url": "https://github.com/NeonGeckoCom/skill-translation",
            "summary": "Translate phrases between languages.",
            "short_description": "Translate phrases between languages.",
            "description": "Use this skill to translate individual words or sentences.",
            "examples": [
                "Translate hello to Polish.",
                "Translate thank you to Ukrainian."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.1",
                    "ovos-utils~=0.0, >=0.0.28",
                    "ovos-workshop~=0.0.15"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "",
            "categories": [],
            "tags": [
                "NeonGecko Original",
                "NeonAI"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom",
                "reginaneon"
            ],
            "skillname": "skill-translation",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Neon Updates",
            "url": "https://github.com/NeonGeckoCom/skill-update",
            "summary": "Skill to update Python packages, configuration, and to create new boot media.",
            "short_description": "Skill to update Python packages, configuration, and to create new boot media.",
            "description": "The update skill provides intents for the user to manage device updates, including core packages, skills, configuration, and creation of new boot media. ### Software Updates This skill can be used to check for software updates and to start the update process on supported devices. For most devices, updates will take 10-30 minutes, and you will not be able to use your device while it is updating. ### Configuration Updates For supported distributions, this skill allows getting updated default configuration. This can be useful for resetting skills configuration to the latest default, or for troubleshooting after making manual configuration changes. ### Create New Media For supported distributions, this skill is able to create a new boot drive from a clean image, similar to what would be distributed with a new device. This involves downloading a new image and then writing it to an available storage device. This is a multi-step process. 1. An operating system image is downloaded. Depending on internet connection    speeds, this generally takes about 15-20 minutes. 2. After user confirmation, this image is written to a non-boot drive connected    to the device. **All existing on the new boot drive is lost**. This generally    takes about 30-45 minutes. 3. After this is complete, the device is shut down so the user may unplug the old    drive and boot the new one.",
            "examples": [
                "Check for updates.",
                "Do you have any updates?",
                "Update my default configuration.",
                "Create a new boot drive.",
                "Switch to beta releases.",
                "Change to stable updates."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-phal-plugin-core-updater~=1.2",
                    "neon-utils~=1.8",
                    "ovos-workshop~=0.0.15",
                    "ovos_utils~=0.0, >=0.0.35"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "logo.svg",
            "category": "Information",
            "categories": [
                "Information"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI",
                "Update"
            ],
            "credits": [
                "NeonDaniel",
                "NeonGeckoCom"
            ],
            "skillname": "skill-update",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "User Settings",
            "url": "https://github.com/NeonGeckoCom/skill-user_settings",
            "summary": "Have Neon help you change and control your user settings.",
            "short_description": "Have Neon help you change and control your user settings.",
            "description": "Neon can help you control your user preference settings via this skill.",
            "examples": [
                "Change my units to metric.",
                "Use imperial units.",
                "Change my time format to military time.",
                "Change my time format to twelve hour time.",
                "Enable hesitation.",
                "Disable hesitation.",
                "Use limited responses.",
                "Use standard responses.",
                "Enable audio recordings.",
                "Disable audio recordings.",
                "Permit transcriptions.",
                "Disable transcriptions.",
                "Talk to me faster.",
                "Talk to me slower.",
                "Talk to me normally.",
                "Change my location to Seattle.",
                "Change my timezone to London.",
                "Tell me my name.",
                "Tell me my first name.",
                "Tell me my last name.",
                "Tell me my email address.",
                "Where am I?",
                "My birthday is...",
                "My email address is...",
                "My name is...",
                "Change my first name to Daniel.",
                "Change my preferred name to Dan.",
                "Tell me my language settings.",
                "I will speak to you in Spanish.",
                "Speak to me in French.",
                "Change my primary language to German.",
                "Change my secondary language to Ukrainian.",
                "No secondary language."
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils[network]~=1.4",
                    "ovos-bus-client~=0.0.3",
                    "ovos-utils~=0.0, >=0.0.32"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
            "category": "Configuration",
            "categories": [
                "Configuration",
                "Daily"
            ],
            "tags": [
                "NeonGecko Original",
                "NeonAI"
            ],
            "credits": [
                "NeonDaniel",
                "reginaneon",
                "NeonGeckoCom"
            ],
            "skillname": "skill-user_settings",
            "authorname": "NeonGeckoCom",
            "foldername": null
        },
        {
            "title": "Weather",
            "url": "https://github.com/NeonGeckoCom/skill-weather",
            "summary": "Get current weather and forecast info.",
            "short_description": "Get current weather and forecast info.",
            "description": "This skill provides current weather information at different locations and forecasts up to 5 days. Use of this skill requires use of third-party APIs. If you do not have access to Neon API servers, you may access the Alpha Vantage API directly by providing a key in `~/owm.txt`. You can generate an Open Weather Map key [here](https://home.openweathermap.org/users/sign_up)",
            "examples": [
                "What is the weather in Los Angeles?",
                "What is the forecast for Friday?"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "multi-key-dict==2.0.3",
                    "neon-api-proxy~=0.4",
                    "neon-utils~=1.0",
                    "ovos_utils~=0.0, >=0.0.28",
                    "requests>=2.13.0"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://rawgithub.com/FortAwesome/Font-Awesome/master/svgs/solid/sun.svg",
            "category": "",
            "categories": [],
            "tags": [],
            "credits": [
                "Mycroft AI",
                "NeonDaniel",
                "reginaneon"
            ],
            "skillname": "skill-weather",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "troubleshooting": "Try asking for a different location or changing your default location by saying `Neon change my location to Seattle`."
        },
        {
            "title": "Wikipedia",
            "url": "https://github.com/NeonGeckoCom/skill-wikipedia",
            "summary": "Wikipedia ![](./logo.png)",
            "short_description": "Wikipedia ![](./logo.png)",
            "description": "Query [Wikipedia](https://www.wikipedia.org) for answers to all your questions.  Get just a summary, or ask for more to get in-depth information.  This Skill uses the [Wikipedia for humans](https://github.com/HelloChatterbox/wikipedia_for_humans). NOTE: this will blacklist the official mycroft skill ![](./gui.gif) ![](./gui2.gif)",
            "examples": [
                "Tell me about Elon Musk.",
                "Tell me about beans.",
                "Random Wikipedia.",
                "Check Wikipedia for beans.",
                "Tell me about the Pembroke Welsh Corgi.",
                "Search for chocolate.",
                "\"More information.\" (followup after an initial summary)",
                "\"Tell me more.\" (followup after an initial summary)"
            ],
            "desktopFile": false,
            "warning": "",
            "systemDeps": false,
            "requirements": {
                "python": [
                    "neon-utils~=1.0",
                    "ovos-workshop~=0.0.15",
                    "ovos_utils~=0.0.28",
                    "wikipedia-api~=0.5.8",
                    "wikipedia_for_humans~=0.2.3"
                ],
                "system": {},
                "skill": []
            },
            "incompatible_skills": [],
            "platforms": [
                "i386",
                "x86_64",
                "ia64",
                "arm64",
                "arm"
            ],
            "branch": "master",
            "license": "BSD-3-Clause",
            "icon": "https://raw.githack.com/FortAwesome/Font-Awesome/master/svgs/brands/wikipedia-w.svg",
            "category": "Information",
            "categories": [
                "Information"
            ],
            "tags": [
                "wikipedia",
                "encyclopedia",
                "general-knowledge",
                "wiki",
                "question",
                "query",
                "Neon Enhanced"
            ],
            "credits": [
                "JarbasAl",
                "NeonDaniel"
            ],
            "skillname": "skill-wikipedia",
            "authorname": "NeonGeckoCom",
            "foldername": null,
            "logo": "action/skill/logo.png",
            "platform support": "- :heavy_check_mark: - tested and confirmed working - :x: - incompatible/non-functional - :question: - untested - :construction: - partial support |     platform    |   status   |  tag  | version | last tested | |:---------------:|:----------:|:-----:|:-------:|:-----------:| |    [Chatterbox](https://hellochatterbox.com)   | :question: |  dev  |         |    never    | |     [HolmesV](https://github.com/HelloChatterbox/HolmesV)     | :question: |  dev  |         |    never    | |    [LocalHive](https://github.com/JarbasHiveMind/LocalHive)    | :question: |  dev  |         |    never    | |  [Mycroft Mark1](https://github.com/MycroftAI/enclosure-mark1)    | :question: |  dev  |         |    never    | |  [Mycroft Mark2](https://github.com/MycroftAI/hardware-mycroft-mark-II)    | :question: |  dev  |         |    never    | |    [NeonGecko](https://neon.ai)      | :question: |  dev  |         |    never    | |       [OVOS](https://github.com/OpenVoiceOS)        | :question: |  dev  |         |    never    | |     [Picroft](https://github.com/MycroftAI/enclosure-picroft)       | :question: |  dev  |         |    never    | | [Plasma Bigscreen](https://plasma-bigscreen.org/)  | :question: |  dev  |         |    never    | - `tag` - link to github release / branch / commit - `version` - link to release/commit of platform repo where this was tested"
        }
    ]
}
